package Controller;

import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ResourceBundle;
import Entity.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;

/**
 * @author Tal Asulin
 * PrincGenClassReport - for principal use for generate historgram report.
 * */
public class PrincGenClassReport implements Initializable{
	
	/**chartTitle - Chart title */
	public static String chartTitle;
	
	/**xAx - x - Property name.*/
	public static String xAx;
	
	/**yAx - y Property name.*/
	public static String yAx;
	
	/**option - Specify the kind of report to present.
	 * 1- Generate report by course name.
	 * 2- Generate report by teacher name.
	 * 3- Generate report by class name.
	 * */
	public static int option;
	
	/**xAxis - Category x axis for the histogram.*/
	private CategoryAxis xAxis = new CategoryAxis();
	
	/**yAxis - Category x axis for the histogram.*/
	private NumberAxis yAxis = new NumberAxis();
    
	/**chart - Bar chart - Generated by the FXML builder.*/
	@FXML
    private BarChart<String,Number> chart;

	/**statArg - Argument for the Bar chart.*/
    public static ObservableList<Statistical> statArg;
    
    /**initialize() - initilize the screen on load.*/
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		chart.setTitle(chartTitle);
		chart.getXAxis().setLabel(xAx);
		chart.getYAxis().setLabel(yAx);
		XYChart.Series series1 = new XYChart.Series();
		series1.setName("Avarage grade");
		
		
		/*
		* 1- Generate report by course name.
		* 2- Generate report by teacher name.
		* 3- Generate report by class name. 
		* */
		switch(option){
		case 1:
		{
			for(int i = 2014 ; i< 2018 ; i++)
				for(int j=0; j<statArg.size();j++)
					if(statArg.get(j).getSemYear().equals(String.valueOf(i)))
						series1.getData().add(new XYChart.Data(statArg.get(j).getSemYear()+"-"+statArg.get(j).getSemName() + "-"+statArg.get(j).getCourseName(),Double.parseDouble(statArg.get(j).getGrade())));		
			break;
			
		}
		
		case 2:
		{
			for(int i = 2014 ; i< 2018 ; i++)
				for(int j=0; j<statArg.size();j++)
					if(statArg.get(j).getSemYear().equals(String.valueOf(i)))
						series1.getData().add(new XYChart.Data(statArg.get(j).getSemYear()+"-"+statArg.get(j).getSemName() + "-"+statArg.get(j).getTeachName(),Double.parseDouble(statArg.get(j).getGrade())));		
			break;
		}
		case 3:
		{
			for(int i = 2014 ; i< 2018 ; i++)
				for(int j=0; j<statArg.size();j++)
					if(statArg.get(j).getSemYear().equals(String.valueOf(i)))
						series1.getData().add(new XYChart.Data(statArg.get(j).getSemYear()+"-"+statArg.get(j).getSemName() + "-"+statArg.get(j).getClassName(),Double.parseDouble(statArg.get(j).getGrade())));				
			break;
		}
		}

		
		
		chart.getData().add(series1);
		
	}
		

	/**setCourseList() - setting the argument for the chart and the selected option to present.
	 * @param courL
	 * @param op
	 * */
	public static void setCourseList(ObservableList<Statistical> courL, int op)
	{
		statArg=courL;
		option=op;
	}
	
	
	/**initializeChart()  = use for initialize the bar chart properties name.
	 * @param cTitle
	 * @param xAxis
	 * @param yAxis
	 * */
	public static void initializeChart(String cTitle, String xAxis, String yAxis)
	{
		chartTitle=cTitle;
		xAx=xAxis;
		yAx=yAxis;
	}
    
    

}
